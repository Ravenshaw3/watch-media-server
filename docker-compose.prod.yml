version: '3.8'

services:
  # Watch Media Server
  watch-media:
    build: .
    container_name: watch-media-server
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - ./media:/media:ro
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - FLASK_ENV=production
      - MEDIA_LIBRARY_PATH=/media
      - DATABASE_PATH=/app/data/watch.db
      - REDIS_URL=redis://redis:6379/0
      - TMDB_API_KEY=${TMDB_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - CACHE_ENABLED=true
      - MONITORING_ENABLED=true
      - DB_OPTIMIZATION_ENABLED=true
      - MAX_CONCURRENT_TRANSCODES=4
      - RATE_LIMIT_ENABLED=true
    depends_on:
      - redis
    networks:
      - watch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: watch-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - watch-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: watch-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - watch-media
    networks:
      - watch-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: watch-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - watch-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: watch-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - watch-network

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: watch-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./loki-config.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - watch-network

  # Log Collection
  promtail:
    image: grafana/promtail:latest
    container_name: watch-promtail
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/watch
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - watch-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
  loki-data:

networks:
  watch-network:
    driver: bridge
